@page "/"
@inject IToDoRepository toDoRepository 

<div class="d-flex flex-row justify-content-between align-items-center">
    <h1>To Do List</h1>
    <div><a href="create" class="btn btn-primary">Create</a></div>
</div>

<GenericList List="ToDos">
    <WholeListTemplate>
        <div class="table-responsive mt-4">
            <table class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th scope="col">Action</th>
                        <th scope="col">Subject</th>
                        <th scope="col">Description</th>
                        <th scope="col">Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in ToDos)
                    {
                        <tr>
                            <td>
                                <a class="btn btn-primary" href="/edit/@item.IdToDo">Edit</a>
                                <button class="btn btn-danger" @onclick="@(() => Delete(item.IdToDo))">Delete</button>
                            </td>
                            <td>@item.Subject</td>
                            <td>@((!string.IsNullOrWhiteSpace(item.Description) && item.Description.Length > 25) ? item.Description.Substring(0, 25) + "..." : item.Description)</td>
                            <td>@item.StatusName</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </WholeListTemplate>
</GenericList>

@code {

    List<ToDoDTO> ToDos;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ToDos = await toDoRepository.GetToDosDTO();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task Delete(Guid IdToDo)
    {
        await toDoRepository.DeleteToDo(IdToDo);
        ToDos = await toDoRepository.GetToDosDTO();
    }

}

